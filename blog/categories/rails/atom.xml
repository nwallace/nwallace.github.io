<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | No Such Thing as Two]]></title>
  <link href="http://nwallace.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://nwallace.github.io/"/>
  <updated>2015-07-12T20:40:32-04:00</updated>
  <id>http://nwallace.github.io/</id>
  <author>
    <name><![CDATA[Nathan Wallace]]></name>
    <email><![CDATA[nathan@nosuchthingastwo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Macros]]></title>
    <link href="http://nwallace.github.io/blog/2015/04/20/rspec-macros/"/>
    <updated>2015-04-20T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2015/04/20/rspec-macros</id>
    <content type="html"><![CDATA[<p>Nobody likes writing boilerplate. It&#39;s repetitive, slow, and just plain boring.
One of the first rules new programmers learn is not to repeat themselves. We do
a good job upholding this principle in our app code, but unit tests are a
different story. In unit tests, it&#39;s often preferable <em>not</em> to write DRY code.
We prefer explicitness and clarity to malleability and reusability.</p>

<p>Usually.</p>

<p>As with all rules in software development, I believe there are exceptions to
this rule. Consider authentication. For every route in your app that requires
authentication, you need to write a controller test to assert that an
unauthenticated user does not have access. I write those tests something like
this (as described <a href="https://www.relishapp.com/rspec/rspec-rails/v/3-2/docs/controller-specs">here</a>).</p>

<div class="no-line-numbers">
```ruby spec/controllers/secrets_controller_spec.rb
RSpec.describe SecretsController do

  describe "GET index" do
    it "requires the user be signed in" do
      get :index
      expect(response).to redirect_to new_session_path
    end
  end
end
```
</div>

<p>I&#39;ve written controller tests exactly like this at least a hundred times over
the past couple of years, and you know what I realized? It&#39;s just
<strong>boilerplate</strong>. It took me a long time to even consider those repetitive tests
duplication (they&#39;re testing different application code, after all), but there
comes a point when the repetition becomes hard to ignore.</p>

<p>I wanted a way to simply declare that my controller action should require the
user to be authenticated, rather than imperatively (and incessantly) writing out
that same unit test again.</p>

<p>I want to write code like this:</p>

<div class="no-line-numbers">
```ruby spec/controllers/secrets_controller_spec.rb
RSpec.describe SecretsController do

  describe "GET index" do
    it_requires_the_user_be_signed_in
  end
end
```
</div>

<p>We could accomplish something similar with <a href="http://www.relishapp.com/rspec/rspec-core/v/3-2/docs/example-groups/shared-examples">shared examples</a>, but the
language isn&#39;t as expressive as I want. Could we define the method we want
ourselves?</p>

<h2>Parsing the HTTP method and controller action</h2>

<p>Our method will need to send the right HTTP request to the right endpoint, then
assert that the controller sent us to the sign in page. Due to my consistent
organization of my controller specs, by the time we call
<code>it_requires_the_user_be_signed_in</code>, we&#39;ve already written the name of the
controller, the HTTP method and the controller action in our descriptions.</p>

<p>We can get this information out of RSpec&#39;s <code>current_example</code> method within an
example:</p>

<div class="no-line-numbers no-code-title">
```ruby
RSpec.describe SomeClass do
  describe "some description" do
    it "can introspect its own metadata" do
      expect(RSpec.current_example.metadata[:example_group][:description])
        .to eq "some description"
    end
 end
end
```
</div>

<h2>A simple macro</h2>

<p>RSpec also makes it easy to make extra methods available within an example. But
in this case, we want the method <code>it_requires_the_user_be_signed_in</code> to be
available outside the example blocks. The only way I know to accompish this is
to define the method globally. For organizational purposes, I like to define a
module and include that module into the global namespace in the appropriate
<code>*_helper.rb</code> file:</p>

<div class="no-line-numbers">
```ruby spec/support/macros.rb
module Macros
  def it_requires_the_user_be_signed_in
    it "requires the user be signed in" do
      http_method, controller_action = (
        RSpec.current_example.metadata[:example_group][:description]
          .downcase.split.map(&:to_sym)
      )

      public_send(http_method, controller_action)

      expect(response).to redirect_to new_session_path
    end
  end
end
```
</div>

<div class="no-line-numbers">
```ruby spec/rails_helper.rb
# ...

Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }

RSpec.configure do |config|
  # ...
end

include Macros
```
</div>

<p>With that in place, we&#39;ve implemented the interface we wanted and we can reuse
it anywhere!</p>

<div class="no-line-numbers">
```ruby spec/controllers/secrets_controller_spec.rb
require "rails_helper"

RSpec.describe SecretsController do

  describe "GET index" do
    it_requires_the_user_be_signed_in
  end

  describe "GET show" do
    it_requires_the_user_be_signed_in
  end
end

RSpec.describe OtherController do

  describe "GET new" do
    it_requires_the_user_be_signed_in
  end

  describe "POST create" do
    it_requires_the_user_be_signed_in
  end
end
```
</div>

<p>It will automatically parse out the right HTTP method and controller action to
invoke, and then run the right assertion.</p>

<h2>Caveats</h2>

<p>So far, controller authentication is the only case where I&#39;ve actually used this
idea, but I&#39;m going to keep an eye out for more opportunities. It&#39;s definitely
a technique to use sparingly, since it sacrifices clarity for convenience. But
in this case, it&#39;s helping me move faster through the boilerplate so I can get
back to the interesting stuff</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Including Only a Subset of Associated Records in ActiveRecord]]></title>
    <link href="http://nwallace.github.io/blog/2015/03/31/activerecord-including-only-a-subset-of-associated-records/"/>
    <updated>2015-03-31T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2015/03/31/activerecord-including-only-a-subset-of-associated-records</id>
    <content type="html"><![CDATA[<p>Recently, my pair and I were implementing a search feature for administrators to
find customer records. In our app, customers can have many &quot;affiliations&quot; with
external partners, and it&#39;s common to search for a customer by their ID in one
of these external systems. So if an administrator searches with one of these
external IDs, we want to display the matching ID in the search results so they
can know they found the right record.</p>

<p>For example, imagine our database contains two customers, Bob and Alice. Bob has
two affiliations, one with ID 1111 and another with ID 2222. When the
administrator searches for customers with the ID &quot;2222&quot;, we want to display the
following:</p>

<div class="no-line-numbers no-code-title">
```
Results: (1 of 2)
  Bob (affiliate #2222)
```
</div>

<p>If we&#39;re not careful, however, we might easily write our code such that the page
simply displays Bob&#39;s first affiliation number, rather than the one the admin
was searching for:</p>

<div class="no-line-numbers no-code-title">
```erb
<% search_results.each do |customer| %>
  <li><%= customer.name %> (affiliate #<%= customer.affiliations.first.id %>)</li>
<% end %>
```
</div>

<div class="no-line-numbers no-code-title">
```
Results: (1 of 2)
  Bob (affiliate #1111)
```
</div>

<p>This is confusing! The admin searched for customer with ID 2222, but he got the
customer with ID 1111. Of course, we could display <em>all</em> of the customers&#39;
affiliations, but that could quickly get unwieldy.  We want to preferentially
display the ID the administrator searched for so they know they got the right
customer.</p>

<p>We could do this in Ruby, a la:</p>

<div class="no-line-numbers no-code-title">
```erb
<% search_results.each do |customer| %>
  <li>
    <%= customer.name %>
    (affiliate #<%= customer.affiliations.find { |a| a.id =~ /#{params[:affiliate_id]}/ } %>)
  </li>
<% end %>
```
</div>

<p>But that sucks. We can do better!</p>

<p>Anyone who knows SQL will tell you that what we want to accomplish is easy with
JOINs:</p>

<div class="no-line-numbers no-code-title">
```sql
SELECT *
FROM customers c
INNER JOIN affiliations a ON a.customer_id = c.id
WHERE a.affiliation_id = '2222';
```
</div>

<p>and ActiveRecord lets us do JOINs:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer =
  Customer.joins(:affiliations)
          .where(affiliations: { affiliation_id: "2222" })
```
</div>

<p>But look at what happens when we read the customer&#39;s affiliations:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer.affiliations
# => [<Affiliation id: 1, affiliation_id: "1111", ...>,
#     <Affiliation id: 2, affiliation_id: "2222", ...>]
```
</div>

<p>Despite our <code>where</code> clause to filter out the unwanted affiliations, we still
get all of them when we call <code>customer.affiliations</code>.</p>

<p>The problem is that we&#39;re missing a piece in our ActiveRecord query. The <code>joins</code>
call allows us to reference affiliations in our <code>where</code> call, but ActiveRecord
will only instantiate Customer records from the query results. So when we call
<code>affiliations</code> on the Customer instance, ActiveRecord will go query the database
again without our <code>WHERE</code> clause from before.</p>

<p>To get only the associated records we want, we can leverage another method in
ActiveRecord: <code>includes</code></p>

<p>As you may know, <code>includes</code> is a method that allows us to <a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations">&quot;eager load&quot;</a>
associated records. This method is usually employed to avoid the <a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/">&quot;N+1 queries&quot;
problem</a>, but we can use it here to basically trick ActiveRecord into
retrieving only a subset of the customer&#39;s affiliations:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer =
  Customer.joins(:affiliations)
          .where(affiliations: { affiliation_id: "2222" })
          .includes(:affiliations)

customer.affiliations
# => [<Affiliation id: 2, affiliation_id: "2222", ...>]
```
</div>

<p>It works! We get all the customers with affiliations matching the given id, and
we didn&#39;t get any of the other affiliations of the customer.</p>

<p>The reason this works is that <code>includes</code> tells ActiveRecord to instantiate the
customer&#39;s affiliations association using the data included via the <code>JOIN</code>
clause in the query.  ActiveRecord will do and then cache the associated records
so that when you call <code>affiliations</code> on a Customer it does not query the
database again. This caching behavior is what allows <code>includes</code> to address the
N+1 problem and also what allows us to retrieve only a subset of a record&#39;s
association.</p>
]]></content>
  </entry>
  
</feed>
