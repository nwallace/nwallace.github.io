<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: active record | No Such Thing as Two]]></title>
  <link href="http://nwallace.github.io/blog/categories/active-record/atom.xml" rel="self"/>
  <link href="http://nwallace.github.io/"/>
  <updated>2015-03-31T22:45:48-04:00</updated>
  <id>http://nwallace.github.io/</id>
  <author>
    <name><![CDATA[Nathan Wallace]]></name>
    <email><![CDATA[nathan@nosuchthingastwo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Including Only a Subset of Associated Records in ActiveRecord]]></title>
    <link href="http://nwallace.github.io/blog/2015/03/31/activerecord-including-only-a-subset-of-associated-records/"/>
    <updated>2015-03-31T21:48:46-04:00</updated>
    <id>http://nwallace.github.io/blog/2015/03/31/activerecord-including-only-a-subset-of-associated-records</id>
    <content type="html"><![CDATA[<p>Recently, my pair and I were implementing a search feature for administrators to
find customer records. In our app, customers can have many &quot;affiliations&quot; with
external partners, and it&#39;s common to search for a customer by their ID in one
of these external systems. So if an administrator searches with one of these
external IDs, we want to display the matching ID in the search results so they
can know they found the right record.</p>

<p>For example, imagine our database contains two customers, Bob and Alice. Bob has
two affiliations, one with ID 1111 and another with ID 2222. When the
administrator searches for customers with the ID &quot;2222&quot;, we want to display the
following:</p>

<div class="no-line-numbers no-code-title">
```
Results: (1 of 2)
  Bob (affiliate #2222)
```
</div>

<p>If we&#39;re not careful, however, we might easily write our code such that the page
simply displays Bob&#39;s first affiliation number, rather than the one the admin
was searching for:</p>

<div class="no-line-numbers no-code-title">
```erb
<% search_results.each do |customer| %>
  <li><%= customer.name %> (affiliate #<%= customer.affiliations.first.id %>)</li>
<% end %>
```
</div>

<div class="no-line-numbers no-code-title">
```
Results: (1 of 2)
  Bob (affiliate #1111)
```
</div>

<p>This is confusing! The admin searched for customer with ID 2222, but he got the
customer with ID 1111. Of course, we could display <em>all</em> of the customers&#39;
affiliations, but that could quickly get unwieldy.  We want to preferentially
display the ID the administrator searched for so they know they got the right
customer.</p>

<p>We could do this in Ruby, a la:</p>

<div class="no-line-numbers no-code-title">
```erb
<% search_results.each do |customer| %>
  <li>
    <%= customer.name %>
    (affiliate #<%= customer.affiliations.find { |a| a.id =~ /#{params[:affiliate_id]}/ } %>)
  </li>
<% end %>
```
</div>

<p>But that sucks. We can do better!</p>

<p>Anyone who knows SQL will tell you that what we want to accomplish is easy with
JOINs:</p>

<div class="no-line-numbers no-code-title">
```sql
SELECT *
FROM customers c
INNER JOIN affiliations a ON a.customer_id = c.id
WHERE a.affiliation_id = '2222';
```
</div>

<p>and ActiveRecord lets us do JOINs:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer =
  Customer.joins(:affiliations)
          .where(affiliations: { affiliation_id: "2222" })
```
</div>

<p>But look at what happens when we read the customer&#39;s affiliations:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer.affiliations
# => [<Affiliation id: 1, affiliation_id: "1111", ...>,
#     <Affiliation id: 2, affiliation_id: "2222", ...>]
```
</div>

<p>Despite our <code>where</code> clause to filter out the unwanted affiliations, we still
get all of them when we call <code>customer.affiliations</code>.</p>

<p>The problem is that we&#39;re missing a piece in our ActiveRecord query. The <code>joins</code>
call allows us to reference affiliations in our <code>where</code> call, but ActiveRecord
will only instantiate Customer records from the query results. So when we call
<code>affiliations</code> on the Customer instance, ActiveRecord will go query the database
again without our <code>WHERE</code> clause from before.</p>

<p>To get only the associated records we want, we can leverage another method in
ActiveRecord: <code>includes</code></p>

<p>As you may know, <code>includes</code> is a method that allows us to <a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations">&quot;eager load&quot;</a>
associated records. This method is usually employed to avoid the <a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/">&quot;N+1 queries&quot;
problem</a>, but we can use it here to basically trick ActiveRecord into
retrieving only a subset of the customer&#39;s affiliations:</p>

<div class="no-line-numbers no-code-title">
```ruby
customer =
  Customer.joins(:affiliations)
          .where(affiliations: { affiliation_id: "2222" })
          .includes(:affiliations)

customer.affiliations
# => [<Affiliation id: 2, affiliation_id: "2222", ...>]
```
</div>

<p>It works! We get all the customers with affiliations matching the given id, and
we didn&#39;t get any of the other affiliations of the customer.</p>

<p>The reason this works is that <code>includes</code> tells ActiveRecord to instantiate the
customer&#39;s affiliations association using the data included via the <code>JOIN</code>
clause in the query.  ActiveRecord will do and then cache the associated records
so that when you call <code>affiliations</code> on a Customer it does not query the
database again. This caching behavior is what allows <code>includes</code> to address the
N+1 problem and also what allows us to retrieve only a subset of a record&#39;s
association.</p>
]]></content>
  </entry>
  
</feed>
