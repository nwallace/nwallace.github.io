<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | No Such Thing as Two]]></title>
  <link href="http://nwallace.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://nwallace.github.io/"/>
  <updated>2015-07-12T20:40:32-04:00</updated>
  <id>http://nwallace.github.io/</id>
  <author>
    <name><![CDATA[Nathan Wallace]]></name>
    <email><![CDATA[nathan@nosuchthingastwo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aw snap! Ubuntu Core]]></title>
    <link href="http://nwallace.github.io/blog/2015/01/28/aw-snap-ubuntu-core/"/>
    <updated>2015-01-28T00:00:00-05:00</updated>
    <id>http://nwallace.github.io/blog/2015/01/28/aw-snap-ubuntu-core</id>
    <content type="html"><![CDATA[<p>Docker! DevOps! Containerization! Buzz words! Containerization is sweeping the
community like thick-rimmed glasses and JavaScript transpilers. Since I don&#39;t
want the cool kids to realize I&#39;m a hipster-imposter, I figured I&#39;d better get
ahead of this trend while it&#39;s still cool.</p>

<p>But where to start?</p>

<h2>Ubuntu Core</h2>

<p>I probably should start learning the basics of Docker first, but Ubuntu just
released a new spin they&#39;re calling Core. Ubuntu Core, like
<a href="https://coreos.com/">CoreOS</a> and <a href="http://www.projectatomic.io/">Project
Atomic</a>, is a Linux distribution optimized for
running app containers. I chose to try out Ubuntu Core because I just read
<a href="http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html">Lennart Pottering&#39;s blog post about OS
design</a>
and heard from <del>some rando on Hacker News</del> a reputable source that
Ubuntu Core is an early take on that philosophy. It&#39;s got all kinds of
goodness, including transactional updates, systemd and container runtime
agnosticism (I have a lot of issues with Docker, and much prefer the promise of
something like <a href="https://coreos.com/blog/rocket/">Rocket</a>).</p>

<h2>Getting Down and Dirty</h2>

<p>To try it out, download the OVA image from <a href="http://www.ubuntu.com/cloud/tools/snappy#snappy-ova">this
page</a> and open it with
<a href="https://www.virtualbox.org/">VirtualBox</a> (login and password both <code>ubuntu</code>).
There&#39;s a <a href="http://developer.ubuntu.com/en/snappy/#tour">quick overview of Ubuntu
Core</a> on Ubuntu&#39;s developer site
that walks you through an introduction to <code>snappy</code>, the tool for managing your
containers.</p>

<p>The guide explains how to install app containers with Docker. There&#39;s an example
app for displaying <a href="http://xkcd.com/">xkcd</a> comics. You can install it with:</p>

<p><code>$ sudo snappy install xkcd-webserver</code></p>

<p>The part the guide left out was what the heck that command does! As described
<a href="http://developer.ubuntu.com/en/snappy/#snap-developers">here</a>, Ubuntu Core
installs app files in <code>/apps/&lt;package&gt;/&lt;version&gt;</code>, then symlinks
<code>/apps/&lt;package&gt;/current</code> to the new version (just like Capistrano).</p>

<div class="no-line-numbers">
```
$ ls -l /apps/xkcd-webserver/current
  => lrwxrwxrwx 1 clickpkg clickpkg 5 Jan 28 22:01 /apps/xkcd-webserver/current -> 0.3.1
$ find /apps/xkcd-webserver -type d
  => /apps/xkcd-webserver
     /apps/xkcd-webserver/0.3.1
     /apps/xkcd-webserver/0.3.1/.click
     /apps/xkcd-webserver/0.3.1/.click/triggers
     /apps/xkcd-webserver/0.3.1/.click/updates
     /apps/xkcd-webserver/0.3.1/.click/info
     /apps/xkcd-webserver/0.3.1/www
     /apps/xkcd-webserver/0.3.1/meta
     /apps/xkcd-webserver/0.3.1/bin
```
</div>

<p>Ubuntu Core installs app binaries to <code>/apps/&lt;package&gt;/&lt;version&gt;/bin</code>. If we look
inside the <code>bin</code> directory for our xkcd app, we&#39;ll find the python script that
boots up the webserver:</p>

<div class="no-line-numbers">
```
$ less /apps/xkcd-webserver/current/bin/xkcd-webserver
  => !#/usr/bin/python3
     ...
```
</div>

<p>In fact, the OS has already started the app for us:</p>

<div class="no-line-numbers">
```
$ ps aux | grep xkcd
  => root ... /usr/bin/python3 /apps/xkcd-webserver/0.3.1/bin/xkcd-webserver
```
</div>

<p>To see the app running, set up a port forwarding rule with VirtualBox so you
can navigate to port 80 on the virtual machine. From the VirtualBox VM Manager,
click your Ubuntu Core VM on the left and choose &quot;Settings&quot;. Under &quot;Network&quot; &gt;
&quot;Port Forwarding&quot;, click the plus sign to add a new rule to forward a Host
port (I chose 8080) to port 80 on the Guest. Then navigate to localhost:8080 in
your browser to see the app in all its glory.</p>

<p>Congratulations! You&#39;re running Docker apps on Ubuntu Core! Just be careful not
to tell your boss at work, unless you&#39;re ready to become &quot;the DevOps gal/guy&quot; ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing StarCraft II on Ubuntu 14.04]]></title>
    <link href="http://nwallace.github.io/blog/2014/04/28/starcraft-ii-on-ubuntu-14-04/"/>
    <updated>2014-04-28T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/04/28/starcraft-ii-on-ubuntu-14-04</id>
    <content type="html"><![CDATA[<p>I finally decided to make the leap and cleanse myself of all Windows
installations. I, like so many others, have long been tethered to Windows by
video games. These days, StarCraft is about the only game I play anymore, and
since it purportedly <a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=20882">works great on
Wine</a>, I
decided to give it a shot. There were
<a href="http://jeffhoogland.blogspot.com/2010/07/howto-starcraft-2-on-linux-with-wine.html">some</a>
<a href="http://www.retrohive.com/2013/09/play-starcraft-ii-linux-ubuntu/">other</a>
great blog posts that got me most of the way there, but some of that information
is outdated and gave me problems. I had no need to modify any Wine libraries
or to lower the Windows version with <code>winecfg</code>. With one small hiccup, it worked
perfectly by simply installing Wine, the correct dependencies, and the game.</p>

<p>Here&#39;s what worked for me.</p>

<h2>Install Wine and Dependencies</h2>

<ol>
<li>Install <a href="https://www.winehq.org">Wine</a>:<br>
<code>$ sudo apt-get install wine</code></li>
<li>Install some dependencies for StarCraft with <code>winetricks</code>:<br>
<div class="wrap-code">
 <code>$ winetricks droid fontfix fontsmooth-rgb gdiplus gecko vcrun2008 vcrun2005
               allfonts d3dx11_43 win7 ie6</code>
</div></li>
</ol>

<h2>Install StarCraft</h2>

<ol>
<li>Download <a href="http://dist.blizzard.com/downloads/sc2-installers/full/StarCraft-II-Setup-enUS.exe">the installer</a>
from <a href="https://www.battle.net">Battle.net</a></li>
<li>Run the installer with Wine to install the game</li>
</ol>

<h2>Try It Out and Fix Any Issues</h2>

<p>At this point in my installation, I ran the game to try it out, and I had a
minor problem. The game changed my 1280x720 display to 1920x1080 and caused a
glitch with my mouse pointer. To fix this problem, I ran <code>winecfg</code> and
instructed it to emulate a desktop environment at the correct resolution. Worked
like a charm and also fixes some issues with Alt+Tabbing out of the game.</p>

<p><img src="/images/posts/2014/04/28/dash-winecfg.png" alt="Unity Dash"></p>

<p><img src="/images/posts/2014/04/28/winecfg-vd.png" alt="Winecfg"></p>

<p>If you encounter any other issues, check out the blog posts I mentioned
previously for some tips
(<a href="http://jeffhoogland.blogspot.com/2010/07/howto-starcraft-2-on-linux-with-wine.html">here</a>
and <a href="http://www.retrohive.com/2013/09/play-starcraft-ii-linux-ubuntu/">here</a>).
If those don&#39;t help you and Google fails you, head over to
<a href="http://askubuntu.com">AskUbuntu</a> and try to find help there.</p>

<p>With that, I hope you&#39;ve got StarCraft II working on your Linux box! Please
leave a comment if you run into issues. Most importantly...</p>

<p><img src="/images/posts/2014/04/28/starcraft-battle.png" alt="StarCraft Battle"></p>

<p>glhf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Ruby 2.1.1 on Arch]]></title>
    <link href="http://nwallace.github.io/blog/2014/04/11/fixing-ruby-2-1-1-on-arch/"/>
    <updated>2014-04-11T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/04/11/fixing-ruby-2-1-1-on-arch</id>
    <content type="html"><![CDATA[<p>I recently tried to install Ruby 2.1.1 on my <a href="http://www.archlinux.org">Arch</a>
box with <a href="https://github.com/postmodern/ruby-install"><code>ruby-install</code></a>.
Unfortunately, <a href="https://www.ruby-forum.com/topic/4486950">there&#39;s a bug</a> on Arch
Linux in the current stable build (2.1.1p76).</p>

<div class="no-line-numbers">
```
$ ruby-install ruby 2.1.1
  ...
  make[2]: Entering directory '~/src/ruby-2.1.1/ext/readline'
  compiling readline.c
  readline.c: In function ‘Init_readline’:
  readline.c:1977:26: error: ‘Function’ undeclared (first use in this function)
       rl_pre_input_hook = (Function *)readline_pre_input_hook;
                            ^
  readline.c:1977:26: note: each undeclared identifier is reported only once for each function it appears in
  readline.c:1977:36: error: expected expression before ‘)’ token
       rl_pre_input_hook = (Function *)readline_pre_input_hook;
                                      ^
  readline.c: At top level:
  readline.c:634:1: warning: ‘readline_pre_input_hook’ defined but not used [-Wunused-function]
   readline_pre_input_hook(void)
   ^
  Makefile:228: recipe for target 'readline.o' failed
  make[2]: *** [readline.o] Error 1
  make[2]: Leaving directory '~/src/ruby-2.1.1/ext/readline'
  exts.mk:198: recipe for target 'ext/readline/all' failed
  make[1]: *** [ext/readline/all] Error 2
  make[1]: Leaving directory '~/src/ruby-2.1.1'
  uncommon.mk:180: recipe for target 'build-ext' failed
  make: *** [build-ext] Error 2
  !!! Compiling ruby 2.1.1 failed!
```
</div>

<p>The bug is fixed in trunk, but the fix has not yet been released. Of course, if
you have a system Ruby installed on Arch, you&#39;ll see that it&#39;s version is 2.1.1.
So how did the Arch package manage to compile 2.1.1 in spite of this bug?</p>

<p>The Arch team makes it easy to find the answer to this question. We can view the
package from the Arch repos and see what patches they have applied. Start off by
going to the package page for your architecture. For me, that&#39;s
<a href="https://www.archlinux.org/packages/extra/x86_64/ruby/">here</a>. On the right side
of the page, follow the link to view the source files:</p>

<p><img src="/images/posts/2014/04/11/package-actions.png" alt="Source Files"></p>

<p>If there are any updates to the source made by the package maintainers, you will
see patch files for them. In this case, there is one patch file:</p>

<p>```diff 0001-Fix-undeclared-identifier-error-by-using-the-actual-.patch
From 4c4da3fc650a3595ecc06f49072f1ffae07db706 Mon Sep 17 00:00:00 2001
From: Thomas Dziedzic <a href="mailto:gostrc@gmail.com">gostrc@gmail.com</a>
Date: Sat, 1 Mar 2014 21:41:28 -0800
Subject: [PATCH] Fix undeclared identifier error by using the actual type of
 rl<em>pre</em>input_hook</p>

<hr>

<p>ext/readline/readline.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)</p>

<p>diff --git a/ext/readline/readline.c b/ext/readline/readline.c
index 659adb9..7bc0eed 100644
--- a/ext/readline/readline.c
+++ b/ext/readline/readline.c
@@ -1974,7 +1974,7 @@ Init_readline()</p>
<div class="highlight"><pre><code class="text"> rl_attempted_completion_function = readline_attempted_completion_function;
</code></pre></div>
<p>#if defined(HAVE<em>RL</em>PRE<em>INPUT</em>HOOK)
-    rl<em>pre</em>input<em>hook = (Function *)readline</em>pre<em>input</em>hook;
+    rl<em>pre</em>input<em>hook = (rl</em>hook<em>func</em>t *)readline<em>pre</em>input<em>hook;
 #endif
 #ifdef HAVE</em>RL<em>CATCH</em>SIGNALS</p>

<h2>     rl<em>catch</em>signals = 0;</h2>

<p>1.9.0
```</p>

<p>As you can see, this patch fixes the bug we saw when compiling Ruby. We can use
this patch file with <code>ruby-install</code> to fix the bug! There&#39;s just one little fix
to apply: the line numbers in the patch file don&#39;t match the line number from
our compilation error. The compile error reported a problem on line 1977, but
this patch applies the change to line 1974. All we have to do is update the
patch to apply to the correct line. Create a patch file on your computer. Paste
in the patch from the Arch package, and update the line number.  Your file
should look like this:</p>

<p>```diff fix-readline.patch
From 4c4da3fc650a3595ecc06f49072f1ffae07db706 Mon Sep 17 00:00:00 2001
From: Thomas Dziedzic <a href="mailto:gostrc@gmail.com">gostrc@gmail.com</a>
Date: Sat, 1 Mar 2014 21:41:28 -0800
Subject: [PATCH] Fix undeclared identifier error by using the actual type of
 rl<em>pre</em>input_hook</p>

<hr>

<p>ext/readline/readline.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)</p>

<p>diff --git a/ext/readline/readline.c b/ext/readline/readline.c
index 659adb9..7bc0eed 100644
--- a/ext/readline/readline.c
+++ b/ext/readline/readline.c
@@ -1977,7 +1977,7 @@ Init_readline()</p>
<div class="highlight"><pre><code class="text"> rl_attempted_completion_function = readline_attempted_completion_function;
</code></pre></div>
<p>#if defined(HAVE<em>RL</em>PRE<em>INPUT</em>HOOK)
-    rl<em>pre</em>input<em>hook = (Function *)readline</em>pre<em>input</em>hook;
+    rl<em>pre</em>input<em>hook = (rl</em>hook<em>func</em>t *)readline<em>pre</em>input<em>hook;
 #endif
 #ifdef HAVE</em>RL<em>CATCH</em>SIGNALS</p>

<h2>     rl<em>catch</em>signals = 0;</h2>

<p>1.9.0
```</p>

<p>Now, we can finish intalling Ruby 2.1.1! Just tell ruby-install to use the patch
file we just created:</p>

<p><code>$ ruby-install -p path/to/fix-readline.patch ruby 2.1.1</code></p>

<p>The installation should succeed, and you can now use your favorite Ruby version
manager to use Ruby 2.1.1.</p>
]]></content>
  </entry>
  
</feed>
