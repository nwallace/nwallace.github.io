<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | No Such Thing as Two]]></title>
  <link href="http://nwallace.github.io/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://nwallace.github.io/"/>
  <updated>2015-04-20T21:51:11-04:00</updated>
  <id>http://nwallace.github.io/</id>
  <author>
    <name><![CDATA[Nathan Wallace]]></name>
    <email><![CDATA[nathan@nosuchthingastwo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL Escapades: OVER and PARTITION BY]]></title>
    <link href="http://nwallace.github.io/blog/2014/07/10/sql-escapades-over-and-partition-by/"/>
    <updated>2014-07-10T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/07/10/sql-escapades-over-and-partition-by</id>
    <content type="html"><![CDATA[<p>On a handful of occasions I&#39;ve needed to write a query that returns only one
record per group of records. Like, needing to retrieve one customer record per
address so we can send some mail.</p>

<p>Typically, you can accomplish these types of queries using <code>GROUP BY</code>
statements. Maybe something like this:</p>

<div class="no-line-numbers">
```sql Unique Addresses
SELECT   street_address, city, state
FROM     customers
GROUP BY street_address, city, state
```
</div>

<p>But what if we need to include the customers&#39; first and last names in the
results? We can&#39;t add the name field to our <code>SELECT</code> because it&#39;s not in our
<code>GROUP BY</code> clause. And we don&#39;t want to run an aggregate function on the names
because we can&#39;t guarantee the functions will return a first and last name that
match. This problem is that a grouping query isn&#39;t want we want to do. We don&#39;t
want to get back aggregate data. We want to get back data specific to one
customer -- we just want one per address.</p>

<p>So what do we do?</p>

<h2>OVER</h2>

<p>The <code>OVER</code> clause in SQL is a feature that allows you to retrieve aggregate data
together with data from individual rows. For example, if you want to return all
sales records and (for some reason) the total revenue of all sales with each
record, you could do this:</p>

<div class="no-line-numbers no-code-title">
```sql
SELECT *, sum(price) OVER() AS total_revenue
FROM   sales
```
</div>

<p>While this might be useful occasionally, it&#39;s not helpful to our goal of
retrieving one customer per address. We need...</p>

<h2>PARTITION BY</h2>

<p>The <code>OVER</code> function doesn&#39;t have to be empty, as above. It can take arguments!
<code>PARTITION BY</code> is one such argument that will run the aggregate function against
the table grouped by the the given partitioning column.</p>

<p>So say we want to get revenue subtotals by year instead of a grand total for
our sales records. In Postgres we could to this:</p>

<div class="no-line-numbers no-code-title">
```sql
SELECT *, sum(price) OVER(PARTITION BY date_part('year', created_at)) AS monthly_subtotal
FROM   sales
```
</div>

<h2>Putting It Together</h2>

<p>Let&#39;s get back to our original question of retrieving one customer per address.
Have you figured it out yet? We can partition by the customer&#39;s address! Then
it&#39;s a simple matter of applying the <code>row_number()</code> aggregate function to the
partitioned results to select only one customer per address.</p>

<div class="no-line-numbers">
```sql One Customer Per Address
SELECT results.*
FROM (
    SELECT c.*, row_number() OVER(PARTITION BY street_address, city, state) AS row_num
    FROM   customers c
  ) results
WHERE results.row_number = 1
```
</div>

<p>Voila! We&#39;ve got one full customer record per address!</p>

<p>Let&#39;s do another example to drive it home. Say we&#39;re running a news database
with &quot;stories&quot; that each belong to a single &quot;category&quot;. Let&#39;s write a query to
retrieve the five most recent story titles from each category.</p>

<div class="no-line-numbers">
```sql Top 5 Story Titles Per Category
SELECT title, row_number() OVER(PARTITION BY category_id ORDER BY created_at DESC) AS row_num
FROM   stories
WHERE  row_num <= 5
```
</div>

<p>I&#39;d love to see other takes on how to do these queries, so please leave comments
below if you&#39;ve got other ideas!</p>
]]></content>
  </entry>
  
</feed>
