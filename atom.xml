<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[No Such Thing as Two]]></title>
  <link href="http://nwallace.github.io/atom.xml" rel="self"/>
  <link href="http://nwallace.github.io/"/>
  <updated>2015-01-28T23:22:37-05:00</updated>
  <id>http://nwallace.github.io/</id>
  <author>
    <name><![CDATA[Nathan Wallace]]></name>
    <email><![CDATA[nathan@nosuchthingastwo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aw snap! Ubuntu Core]]></title>
    <link href="http://nwallace.github.io/blog/2015/01/28/aw-snap-ubuntu-core/"/>
    <updated>2015-01-28T00:00:00-05:00</updated>
    <id>http://nwallace.github.io/blog/2015/01/28/aw-snap-ubuntu-core</id>
    <content type="html"><![CDATA[<p>Docker! DevOps! Containerization! Buzz words! Containerization is sweeping the
community like thick-rimmed glasses and JavaScript transpilers. Since I don&#39;t
want the cool kids to realize I&#39;m a hipster-imposter, I figured I&#39;d better get
ahead of this trend while it&#39;s still cool.</p>

<p>But where to start?</p>

<h2>Ubuntu Core</h2>

<p>I probably should start learning the basics of Docker first, but Ubuntu just
released a new spin they&#39;re calling Core. Ubuntu Core, like
<a href="https://coreos.com/">CoreOS</a> and <a href="http://www.projectatomic.io/">Project
Atomic</a>, is a Linux distribution optimized for
running app containers. I chose to try out Ubuntu Core because I just read
<a href="http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html">Lennart Pottering&#39;s blog post about OS
design</a>
and heard from <del>some rando on Hacker News</del> a reputable source that
Ubuntu Core is an early take on that philosophy. It&#39;s got all kinds of
goodness, including transactional updates, systemd and container runtime
agnosticism (I have a lot of issues with Docker, and much prefer the promise of
something like <a href="https://coreos.com/blog/rocket/">Rocket</a>).</p>

<h2>Getting Down and Dirty</h2>

<p>To try it out, download the OVA image from <a href="http://www.ubuntu.com/cloud/tools/snappy#snappy-ova">this
page</a> and open it with
<a href="https://www.virtualbox.org/">VirtualBox</a> (login and password both <code>ubuntu</code>).
There&#39;s a <a href="http://developer.ubuntu.com/en/snappy/#tour">quick overview of Ubuntu
Core</a> on Ubuntu&#39;s developer site
that walks you through an introduction to <code>snappy</code>, the tool for managing your
containers.</p>

<p>The guide explains how to install app containers with Docker. There&#39;s an example
app for displaying <a href="http://xkcd.com/">xkcd</a> comics. You can install it with:</p>

<p><code>$ sudo snappy install xkcd-webserver</code></p>

<p>The part the guide left out was what the heck that command does! As described
<a href="http://developer.ubuntu.com/en/snappy/#snap-developers">here</a>, Ubuntu Core
installs app files in <code>/apps/&lt;package&gt;/&lt;version&gt;</code>, then symlinks
<code>/apps/&lt;package&gt;/current</code> to the new version (just like Capistrano).</p>

<div class="no-line-numbers">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -l /apps/xkcd-webserver/current
</span><span class='line'>  =&gt; lrwxrwxrwx 1 clickpkg clickpkg 5 Jan 28 22:01 /apps/xkcd-webserver/current -&gt; 0.3.1
</span><span class='line'>$ find /apps/xkcd-webserver -type d
</span><span class='line'>  =&gt; /apps/xkcd-webserver
</span><span class='line'>     /apps/xkcd-webserver/0.3.1
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/.click
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/.click/triggers
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/.click/updates
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/.click/info
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/www
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/meta
</span><span class='line'>     /apps/xkcd-webserver/0.3.1/bin</span></code></pre></td></tr></table></div></figure>
</div>

<p>Ubuntu Core installs app binaries to <code>/apps/&lt;package&gt;/&lt;version&gt;/bin</code>. If we look
inside the <code>bin</code> directory for our xkcd app, we&#39;ll find the python script that
boots up the webserver:</p>

<div class="no-line-numbers">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ less /apps/xkcd-webserver/current/bin/xkcd-webserver
</span><span class='line'>  =&gt; !#/usr/bin/python3
</span><span class='line'>     ...</span></code></pre></td></tr></table></div></figure>
</div>

<p>In fact, the OS has already started the app for us:</p>

<div class="no-line-numbers">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ps aux | grep xkcd
</span><span class='line'>  =&gt; root ... /usr/bin/python3 /apps/xkcd-webserver/0.3.1/bin/xkcd-webserver</span></code></pre></td></tr></table></div></figure>
</div>

<p>To see the app running, set up a port forwarding rule with VirtualBox so you
can navigate to port 80 on the virtual machine. From the VirtualBox VM Manager,
click your Ubuntu Core VM on the left and choose &quot;Settings&quot;. Under &quot;Network&quot; &gt;
&quot;Port Forwarding&quot;, click the plus sign to add a new rule to forward a Host
port (I chose 8080) to port 80 on the Guest. Then navigate to localhost:8080 in
your browser to see the app in all its glory.</p>

<p>Congratulations! You&#39;re running Docker apps on Ubuntu Core! Just be careful not
to tell your boss at work, unless you&#39;re ready to become &quot;the DevOps gal/guy&quot; ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Escapades: OVER and PARTITION BY]]></title>
    <link href="http://nwallace.github.io/blog/2014/07/10/sql-escapades-over-and-partition-by/"/>
    <updated>2014-07-10T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/07/10/sql-escapades-over-and-partition-by</id>
    <content type="html"><![CDATA[<p>On a handful of occasions I&#39;ve needed to write a query that returns only one
record per group of records. Like, needing to retrieve one customer record per
address so we can send some mail.</p>

<p>Typically, you can accomplish these types of queries using <code>GROUP BY</code>
statements. Maybe something like this:</p>

<div class="no-line-numbers">
<figure class='code'><figcaption><span>Unique Addresses</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>   <span class="n">street_address</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span> <span class="k">state</span>
</span><span class='line'><span class="k">FROM</span>     <span class="n">customers</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">street_address</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span> <span class="k">state</span>
</span></code></pre></td></tr></table></div></figure>
</div>

<p>But what if we need to include the customers&#39; first and last names in the
results? We can&#39;t add the name field to our <code>SELECT</code> because it&#39;s not in our
<code>GROUP BY</code> clause. And we don&#39;t want to run an aggregate function on the names
because we can&#39;t guarantee the functions will return a first and last name that
match. This problem is that a grouping query isn&#39;t want we want to do. We don&#39;t
want to get back aggregate data. We want to get back data specific to one
customer &#8211; we just want one per address.</p>

<p>So what do we do?</p>

<h2>OVER</h2>

<p>The <code>OVER</code> clause in SQL is a feature that allows you to retrieve aggregate data
together with data from individual rows. For example, if you want to return all
sales records and (for some reason) the total revenue of all sales with each
record, you could do this:</p>

<div class="no-line-numbers">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span><span class="p">,</span> <span class="k">sum</span><span class="p">(</span><span class="n">price</span><span class="p">)</span> <span class="n">OVER</span><span class="p">()</span> <span class="k">AS</span> <span class="n">total_revenue</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">sales</span>
</span></code></pre></td></tr></table></div></figure>
</div>

<p>While this might be useful occasionally, it&#39;s not helpful to our goal of
retrieving one customer per address. We need&#8230;</p>

<h2>PARTITION BY</h2>

<p>The <code>OVER</code> function doesn&#39;t have to be empty, as above. It can take arguments!
<code>PARTITION BY</code> is one such argument that will run the aggregate function against
the table grouped by the the given partitioning column.</p>

<p>So say we want to get revenue subtotals by year instead of a grand total for
our sales records. In Postgres we could to this:</p>

<div class="no-line-numbers">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span><span class="p">,</span> <span class="k">sum</span><span class="p">(</span><span class="n">price</span><span class="p">)</span> <span class="n">OVER</span><span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">date_part</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="n">created_at</span><span class="p">))</span> <span class="k">AS</span> <span class="n">monthly_subtotal</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">sales</span>
</span></code></pre></td></tr></table></div></figure>
</div>

<h2>Putting It Together</h2>

<p>Let&#39;s get back to our original question of retrieving one customer per address.
Have you figured it out yet? We can partition by the customer&#39;s address! Then
it&#39;s a simple matter of applying the <code>row_number()</code> aggregate function to the
partitioned results to select only one customer per address.</p>

<div class="no-line-numbers">
<figure class='code'><figcaption><span>One Customer Per Address</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">results</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="k">c</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">row_number</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">street_address</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span> <span class="k">state</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_num</span>
</span><span class='line'>    <span class="k">FROM</span>   <span class="n">customers</span> <span class="k">c</span>
</span><span class='line'>  <span class="p">)</span> <span class="n">results</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">results</span><span class="p">.</span><span class="n">row_number</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>
</div>

<p>Voila! We&#39;ve got one full customer record per address!</p>

<p>Let&#39;s do another example to drive it home. Say we&#39;re running a news database
with &quot;stories&quot; that each belong to a single &quot;category&quot;. Let&#39;s write a query to
retrieve the five most recent story titles from each category.</p>

<div class="no-line-numbers">
<figure class='code'><figcaption><span>Top 5 Story Titles Per Category</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">row_number</span><span class="p">()</span> <span class="n">OVER</span><span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">category_id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_num</span>
</span><span class='line'><span class="k">FROM</span>   <span class="n">stories</span>
</span><span class='line'><span class="k">WHERE</span>  <span class="n">row_num</span> <span class="o">&lt;=</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>
</div>

<p>I&#39;d love to see other takes on how to do these queries, so please leave comments
below if you&#39;ve got other ideas!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing StarCraft II on Ubuntu 14.04]]></title>
    <link href="http://nwallace.github.io/blog/2014/04/28/starcraft-ii-on-ubuntu-14-04/"/>
    <updated>2014-04-28T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/04/28/starcraft-ii-on-ubuntu-14-04</id>
    <content type="html"><![CDATA[<p>I finally decided to make the leap and cleanse myself of all Windows
installations. I, like so many others, have long been tethered to Windows by
video games. These days, StarCraft is about the only game I play anymore, and
since it purportedly <a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=20882">works great on
Wine</a>, I
decided to give it a shot. There were
<a href="http://jeffhoogland.blogspot.com/2010/07/howto-starcraft-2-on-linux-with-wine.html">some</a>
<a href="http://www.retrohive.com/2013/09/play-starcraft-ii-linux-ubuntu/">other</a>
great blog posts that got me most of the way there, but some of that information
is outdated and gave me problems. I had no need to modify any Wine libraries
or to lower the Windows version with <code>winecfg</code>. With one small hiccup, it worked
perfectly by simply installing Wine, the correct dependencies, and the game.</p>

<p>Here&#39;s what worked for me.</p>

<h2>Install Wine and Dependencies</h2>

<ol>
<li>Install <a href="https://www.winehq.org">Wine</a>:<br>
<code>$ sudo apt-get install wine</code></li>
<li>Install some dependencies for StarCraft with <code>winetricks</code>:<br>
<div class="wrap-code">
 <code>$ winetricks droid fontfix fontsmooth-rgb gdiplus gecko vcrun2008 vcrun2005
               allfonts d3dx11_43 win7 ie6</code>
</div></li>
</ol>

<h2>Install StarCraft</h2>

<ol>
<li>Download <a href="http://dist.blizzard.com/downloads/sc2-installers/full/StarCraft-II-Setup-enUS.exe">the installer</a>
from <a href="https://www.battle.net">Battle.net</a></li>
<li>Run the installer with Wine to install the game</li>
</ol>

<h2>Try It Out and Fix Any Issues</h2>

<p>At this point in my installation, I ran the game to try it out, and I had a
minor problem. The game changed my 1280x720 display to 1920x1080 and caused a
glitch with my mouse pointer. To fix this problem, I ran <code>winecfg</code> and
instructed it to emulate a desktop environment at the correct resolution. Worked
like a charm and also fixes some issues with Alt+Tabbing out of the game.</p>

<p><img src="http://nwallace.github.io/images/posts/2014/04/28/dash-winecfg.png" alt="Unity Dash"></p>

<p><img src="http://nwallace.github.io/images/posts/2014/04/28/winecfg-vd.png" alt="Winecfg"></p>

<p>If you encounter any other issues, check out the blog posts I mentioned
previously for some tips
(<a href="http://jeffhoogland.blogspot.com/2010/07/howto-starcraft-2-on-linux-with-wine.html">here</a>
and <a href="http://www.retrohive.com/2013/09/play-starcraft-ii-linux-ubuntu/">here</a>).
If those don&#39;t help you and Google fails you, head over to
<a href="http://askubuntu.com">AskUbuntu</a> and try to find help there.</p>

<p>With that, I hope you&#39;ve got StarCraft II working on your Linux box! Please
leave a comment if you run into issues. Most importantly&#8230;</p>

<p><img src="http://nwallace.github.io/images/posts/2014/04/28/starcraft-battle.png" alt="StarCraft Battle"></p>

<p>glhf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Ruby 2.1.1 on Arch]]></title>
    <link href="http://nwallace.github.io/blog/2014/04/11/fixing-ruby-2-1-1-on-arch/"/>
    <updated>2014-04-11T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/04/11/fixing-ruby-2-1-1-on-arch</id>
    <content type="html"><![CDATA[<p>I recently tried to install Ruby 2.1.1 on my <a href="http://www.archlinux.org">Arch</a>
box with <a href="https://github.com/postmodern/ruby-install"><code>ruby-install</code></a>.
Unfortunately, <a href="https://www.ruby-forum.com/topic/4486950">there&#39;s a bug</a> on Arch
Linux in the current stable build (2.1.1p76).</p>

<div class="no-line-numbers">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby-install ruby 2.1.1
</span><span class='line'>  ...
</span><span class='line'>  make[2]: Entering directory '~/src/ruby-2.1.1/ext/readline'
</span><span class='line'>  compiling readline.c
</span><span class='line'>  readline.c: In function ‘Init_readline’:
</span><span class='line'>  readline.c:1977:26: error: ‘Function’ undeclared (first use in this function)
</span><span class='line'>       rl_pre_input_hook = (Function *)readline_pre_input_hook;
</span><span class='line'>                            ^
</span><span class='line'>  readline.c:1977:26: note: each undeclared identifier is reported only once for each function it appears in
</span><span class='line'>  readline.c:1977:36: error: expected expression before ‘)’ token
</span><span class='line'>       rl_pre_input_hook = (Function *)readline_pre_input_hook;
</span><span class='line'>                                      ^
</span><span class='line'>  readline.c: At top level:
</span><span class='line'>  readline.c:634:1: warning: ‘readline_pre_input_hook’ defined but not used [-Wunused-function]
</span><span class='line'>   readline_pre_input_hook(void)
</span><span class='line'>   ^
</span><span class='line'>  Makefile:228: recipe for target 'readline.o' failed
</span><span class='line'>  make[2]: *** [readline.o] Error 1
</span><span class='line'>  make[2]: Leaving directory '~/src/ruby-2.1.1/ext/readline'
</span><span class='line'>  exts.mk:198: recipe for target 'ext/readline/all' failed
</span><span class='line'>  make[1]: *** [ext/readline/all] Error 2
</span><span class='line'>  make[1]: Leaving directory '~/src/ruby-2.1.1'
</span><span class='line'>  uncommon.mk:180: recipe for target 'build-ext' failed
</span><span class='line'>  make: *** [build-ext] Error 2
</span><span class='line'>  !!! Compiling ruby 2.1.1 failed!</span></code></pre></td></tr></table></div></figure>
</div>

<p>The bug is fixed in trunk, but the fix has not yet been released. Of course, if
you have a system Ruby installed on Arch, you&#39;ll see that it&#39;s version is 2.1.1.
So how did the Arch package manage to compile 2.1.1 in spite of this bug?</p>

<p>The Arch team makes it easy to find the answer to this question. We can view the
package from the Arch repos and see what patches they have applied. Start off by
going to the package page for your architecture. For me, that&#39;s
<a href="https://www.archlinux.org/packages/extra/x86_64/ruby/">here</a>. On the right side
of the page, follow the link to view the source files:</p>

<p><img src="http://nwallace.github.io/images/posts/2014/04/11/package-actions.png" alt="Source Files"></p>

<p>If there are any updates to the source made by the package maintainers, you will
see patch files for them. In this case, there is one patch file:</p>

<figure class='code'><figcaption><span>0001-Fix-undeclared-identifier-error-by-using-the-actual-.patch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>From 4c4da3fc650a3595ecc06f49072f1ffae07db706 Mon Sep 17 00:00:00 2001
</span><span class='line'>From: Thomas Dziedzic &lt;gostrc@gmail.com&gt;
</span><span class='line'>Date: Sat, 1 Mar 2014 21:41:28 -0800
</span><span class='line'>Subject: [PATCH] Fix undeclared identifier error by using the actual type of
</span><span class='line'> rl_pre_input_hook
</span><span class='line'>
</span><span class='line'><span class="gd">---</span>
</span><span class='line'> ext/readline/readline.c | 2 +-
</span><span class='line'> 1 file changed, 1 insertion(+), 1 deletion(-)
</span><span class='line'>
</span><span class='line'><span class="gh">diff --git a/ext/readline/readline.c b/ext/readline/readline.c</span>
</span><span class='line'><span class="gh">index 659adb9..7bc0eed 100644</span>
</span><span class='line'><span class="gd">--- a/ext/readline/readline.c</span>
</span><span class='line'><span class="gi">+++ b/ext/readline/readline.c</span>
</span><span class='line'><span class="gu">@@ -1974,7 +1974,7 @@ Init_readline()</span>
</span><span class='line'>
</span><span class='line'>     rl_attempted_completion_function = readline_attempted_completion_function;
</span><span class='line'> #if defined(HAVE_RL_PRE_INPUT_HOOK)
</span><span class='line'><span class="gd">-    rl_pre_input_hook = (Function *)readline_pre_input_hook;</span>
</span><span class='line'><span class="gi">+    rl_pre_input_hook = (rl_hook_func_t *)readline_pre_input_hook;</span>
</span><span class='line'> #endif
</span><span class='line'> #ifdef HAVE_RL_CATCH_SIGNALS
</span><span class='line'>     rl_catch_signals = 0;
</span><span class='line'><span class="gd">-- </span>
</span><span class='line'>1.9.0
</span></code></pre></td></tr></table></div></figure>

<p>As you can see, this patch fixes the bug we saw when compiling Ruby. We can use
this patch file with <code>ruby-install</code> to fix the bug! There&#39;s just one little fix
to apply: the line numbers in the patch file don&#39;t match the line number from
our compilation error. The compile error reported a problem on line 1977, but
this patch applies the change to line 1974. All we have to do is update the
patch to apply to the correct line. Create a patch file on your computer. Paste
in the patch from the Arch package, and update the line number.  Your file
should look like this:</p>

<figure class='code'><figcaption><span>fix-readline.patch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>From 4c4da3fc650a3595ecc06f49072f1ffae07db706 Mon Sep 17 00:00:00 2001
</span><span class='line'>From: Thomas Dziedzic &lt;gostrc@gmail.com&gt;
</span><span class='line'>Date: Sat, 1 Mar 2014 21:41:28 -0800
</span><span class='line'>Subject: [PATCH] Fix undeclared identifier error by using the actual type of
</span><span class='line'> rl_pre_input_hook
</span><span class='line'>
</span><span class='line'><span class="gd">---</span>
</span><span class='line'> ext/readline/readline.c | 2 +-
</span><span class='line'> 1 file changed, 1 insertion(+), 1 deletion(-)
</span><span class='line'>
</span><span class='line'><span class="gh">diff --git a/ext/readline/readline.c b/ext/readline/readline.c</span>
</span><span class='line'><span class="gh">index 659adb9..7bc0eed 100644</span>
</span><span class='line'><span class="gd">--- a/ext/readline/readline.c</span>
</span><span class='line'><span class="gi">+++ b/ext/readline/readline.c</span>
</span><span class='line'><span class="gu">@@ -1977,7 +1977,7 @@ Init_readline()</span>
</span><span class='line'>
</span><span class='line'>     rl_attempted_completion_function = readline_attempted_completion_function;
</span><span class='line'> #if defined(HAVE_RL_PRE_INPUT_HOOK)
</span><span class='line'><span class="gd">-    rl_pre_input_hook = (Function *)readline_pre_input_hook;</span>
</span><span class='line'><span class="gi">+    rl_pre_input_hook = (rl_hook_func_t *)readline_pre_input_hook;</span>
</span><span class='line'> #endif
</span><span class='line'> #ifdef HAVE_RL_CATCH_SIGNALS
</span><span class='line'>     rl_catch_signals = 0;
</span><span class='line'><span class="gd">-- </span>
</span><span class='line'>1.9.0
</span></code></pre></td></tr></table></div></figure>

<p>Now, we can finish intalling Ruby 2.1.1! Just tell ruby-install to use the patch
file we just created:</p>

<p><code>$ ruby-install -p path/to/fix-readline.patch ruby 2.1.1</code></p>

<p>The installation should succeed, and you can now use your favorite Ruby version
manager to use Ruby 2.1.1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ruby]]></title>
    <link href="http://nwallace.github.io/blog/2014/04/03/getting-started-with-ruby/"/>
    <updated>2014-04-03T04:26:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/04/03/getting-started-with-ruby</id>
    <content type="html"><![CDATA[<p>I&#39;m self-taught in Ruby. I owe a huge debt to the incredible Ruby community for
being able to do that. Most of the developers I know do Java or C++ (since
that&#39;s what they taught in college), and when I told them I was looking for a
Ruby job a lot of them were curious about the appeal. I have been trying to
convert them, and I wanted to jot down my path to <del>salvation</del> learn
Ruby so others could do the same.</p>

<h2>Get a handle on the language</h2>

<p>There are tons of awesome resources on the web for learning Ruby, but my
favorite for anyone just starting out is
<a href="http://www.codecademy.com/tracks/ruby">Codecademy</a>. Codecademy has tracks for a
lot more than just Ruby, and I&#39;ve had a great experience with all of the ones
I&#39;ve tried. They&#39;re perfect for people who have never programmed Ruby before,
and I think they would be great for people who have never programmed at all
before. The tracks get more and more advanced as you go along, so there are
resources here for people who may have played around with Ruby in the past as
well, but don&#39;t know the language very well.</p>

<h2>Reach enlightenment</h2>

<p>After getting a feel for the syntax and basic usage of the language, I moved
onto the <a href="http://rubykoans.com">Ruby Koans</a>. The Koans are a special kind of
experience. They walk you through different features of the language like your
own personal Mr. Miyagi. They start to engrain the idea of test-driven
development while going in-depth on language constructs and the standard
library.</p>

<h2>Hop on the Rails</h2>

<p>Let&#39;s be real &#8211; people learn Ruby so they can write Rails apps. Yes, Ruby is an
awesome language in its own right, but that&#39;s not why most people pick it up.
The absolute best tutorial for a beginner to learn Rails is the one by Michael
Hartl. You can read his book online for free at
<a href="http://ruby.railstutorial.org">ruby.railstutorial.org</a>. The source is on
<a href="https://github.com/railstutorial">Github</a> for easy reference if you make a
mistake, and there are lots of <a href="http://stackoverflow.com/questions/tagged/railstutorial.org">Stack
Overflow</a> answers
to help you along as well. Hartl&#39;s tutorial walks you through building a Twitter
clone, teaching you Rails, TDD, Twitter Bootstrap, and Heroku along the way. It
was invaluable for me as a way to really sink your teeth into a real Rails app.</p>

<h2>Bring it home</h2>

<p>After that, you <em>have</em> to start your own project. Tutorials are great, but they
hold your hand the whole way &#8211; they don&#39;t force you answer any of your own
questions or come up with your own ideas. If you don&#39;t already have a project
idea in mind, do what inspired me: find a problem where someone is using an
Excel spreadsheet and turn it into a web app. My aunt is a chef, and she was
using Excel to track inventory and expenses, so I turned it into a Rails app.
The most important thing about the project is that it needs to be something to
keep you motivated. Motivation is the largest hurdle in learning a new language
or framework, so you need to be personally invested in solving your problem.</p>

<p>It took me about 8 months of my free time to get to a place where I really felt
comfortable in Ruby and with Rails, so don&#39;t get discouraged if it takes awhile.
At the end of the day, Ruby is about <strong>joy</strong>. It&#39;s optimized for you, the
developer. So have fun with it, and try to improve just a little everyday.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I have a blog!]]></title>
    <link href="http://nwallace.github.io/blog/2014/03/21/i-have-a-blog/"/>
    <updated>2014-03-21T00:00:00-04:00</updated>
    <id>http://nwallace.github.io/blog/2014/03/21/i-have-a-blog</id>
    <content type="html"><![CDATA[<p>Thanks for visiting my blog! This blog is under construction right now, but I will have my first post out soon. :)</p>
]]></content>
  </entry>
  
</feed>
